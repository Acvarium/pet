#!/bin/python3
import yaml
import os
import sys
import json
import argparse
import datetime

statout=""
graphout=""
statusout=""
errorout=""
messageout=""

graphics={}
graphics[0]={}
graphics[0]['happy']=":)"
graphics[0]['sad']=":("
graphics[0]['dirty']=":(.°"
graphics[0]['sleepy']="¦o"
graphics[0]['sleeping']="¦. zZ"
graphics[0]['learning']="[:|]"
graphics[0]['hungry']=":O"
graphics[0]['sick']=":&"
graphics[0]['dead']="x("
graphics[0]['healing']=":& +"
graphics[0]['eating']=":O*"
graphics[0]['playing']=":D ° ]"
graphics[0]['cleaning']=":) ~~¬"
graphics[1]={}
graphics[1]['happy']=":-)"
graphics[1]['sad']=":-("
graphics[1]['dirty']=":-(.°"
graphics[1]['sleepy']="¦-o"
graphics[1]['sleeping']="¦-. zZ"
graphics[1]['learning']="[:-|]"
graphics[1]['hungry']=":-O"
graphics[1]['sick']=":-&"
graphics[1]['dead']="x-("
graphics[1]['healing']=":-& +"
graphics[1]['eating']=":-O*"
graphics[1]['playing']=":-D ° ]"
graphics[1]['cleaning']=":-) ~~¬"

# Change Directory to that of the script
if os.path.dirname(sys.argv[0]):
	os.chdir(os.path.dirname(sys.argv[0]))




def loadconfig():
	with open ("config.yml", "r") as openfile:
		configdata=openfile.read()
	config=yaml.load(configdata)
	return config

def loadlang(lang):
	with open ("lang_"+lang+".yml", "r") as openfile:
		langdata=openfile.read()
	lang=yaml.load(langdata)
	return lang


def birth(name):
	global messageout
	if not name:
		print(lang["error-noname"])
		sys.exit(1)
	messageout+=" "+lang["born"]
	state={}
	state["name"]=name
	return state



def load():
	state=None
	try:
		with open (config["savefile"], "r") as openfile:
			statedata=openfile.read()
			if statedata:
				state=json.loads(statedata)
	except FileNotFoundError:
		pass
	return state





def minmax(number):
	if number < 0:
		number=0
	elif number > 100:
		number=100
	return number





def save(state):
	with open (config["savefile"], "w") as openfile:
		openfile.write(json.dumps(state))




def initialize(state,key,value):
	if not key in state:
		state[key]=value
	return state




def testaction(state,time):
	global errorout
	if time - state["actiontime"] > config[state["action"]+"time"] * config["timemodifier"] or args.timeskip:
		if state["action"]=="heal":
			state["sick"]=False
			for key in ["food","sleep","clean","play","learn"]:
				state[key]=config[key+"afterheal"]

		else:
			if state[state["action"]]<0:
				state[state["action"]]=0
			state[state["action"]]=state[state["action"]]+config[state["action"]+"improve"]
			state=decrease(state)
		state["action"]=None
	return state

def sick(state,time):
	global messageout
	state["sick"]=True
	state["sicktime"]=time
	state["action"]=None
	messageout+=" "+lang["sick-message"]
	return state

def getstatus(state,time):
	global errorout
	state=initialize(state,"time",time)
	state=initialize(state,"sick",False)
	state=initialize(state,"sicktime",0)
	state=initialize(state,"action",None)
	state=initialize(state,"actiontime",0)
	state=initialize(state,"dead",False)
	state=initialize(state,"grow",0)
	state=initialize(state,"growtime",time)


	lasttime=state["time"]
	state["time"]=time
	timediff=state["time"]-lasttime
	if state["action"]:
		state=testaction(state,time)
	if not state["dead"]:
		for key in ["food","sleep","clean","play","learn"]:
			state=initialize(state,key,50)
			state[key]=state[key]-((timediff / config["timemodifier"]) * config[key+"mod"])
			if key+"sick" in config and not state["sick"]:
				low,high,lowsick,highsick=config[key+"sick"].split(",")
				if state[key]<int(low):
					if lowsick.lower()=="true":
						state=sick(state,time)
					else:
						state[key]=0
				if state[key]>int(high):
					if highsick.lower()=="true":
						state=sick(state,time)
					else:
						state[key]=100

		if getmood(state)=="happy" and state["time"]-state["growtime"]>config["growtime"]*config["timemodifier"] and state["grow"]<config["maxgrow"]:
			state["grow"]+=1
			messageout+=" "+lang["grown"]
	elif time-state["sicktime"]>config["sicktime"]*config["timemodifier"]:
		if not state["dead"]:
			errorout=" "+lang["died"]
		state["dead"]=True
	return state





def displayvalue(state,key):
	value=minmax(state[key])
	value=value/25
	value=round(value)
	# segments=""
	# for i in range(value):
		# segments+="#"
	# value="["+segments.ljust(4)+"]"
	value=str(value)
	return value




def showstatus(state):
	global statout
	global messageout
	global errorout
	sep=" "
	statout=" "
	if state["dead"]==True:
		statout+=lang["dead"]+sep
	elif state["sick"]==True and state["action"]!="heal":
		statout+=lang["sick"]+sep
	else:
		if state["action"]:
			timeleft=(config[state["action"]+"time"]*config["timemodifier"]) - (state["time"] - state["actiontime"]) 
			messageout+=" "+lang["remainingtime"]+":"+str(datetime.timedelta(seconds=round(timeleft)))+sep
		statout+="Fd:"+displayvalue(state,"food")+sep
		statout+="zZz:"+displayvalue(state,"sleep")+sep
		statout+="cln:"+displayvalue(state,"clean")+sep
		statout+="fun:"+displayvalue(state,"play")+sep
		statout+="lrn:"+displayvalue(state,"learn")+sep
	
def decrease(state):
	for key in ["food","sleep","clean","play","learn"]:
		decreasekey=state["action"]+"-"+key
		if decreasekey in config:
			state[key]=state[key] - config[decreasekey]
	return state





def wait(state,action,time):
	global	errorout
	if action=="heal" and not state["sick"]:
		errorout=" "+lang["notsick"]
	elif not state["action"]:
		if not state["dead"] and (not state["sick"] or action=="heal"):
			state["action"]=action
			state["actiontime"]=time
	else:
		errorout=" "+lang["busy"]
	return state

def getmood(state):
	if state["dead"]:
		mood="dead"
	elif state["sick"] and state["action"]!="heal":
		mood="sick"
	elif state["action"]=="learn":
		mood="learning"
	elif state["action"]=="sleep":
		mood="sleeping"
	elif state["action"]=="food":
		mood="eating"
	elif state["action"]=="play":
		mood="playing"
	elif state["action"]=="heal":
		mood="healing"
	elif state["action"]=="clean":
		mood="cleaning"
	elif state["clean"]<config["unhappyat"]:
		mood="dirty"
	elif state["sleep"]<config["unhappyat"]:
		mood="sleepy"
	elif state["food"]<config["unhappyat"]:
		mood="hungry"
	elif state["play"]<config["unhappyat"] or state["learn"] < config["unhappyat"]:
		mood="sad"
	else:
		mood="happy"
	return mood



def showgraphics(state):
	global graphout
	mood=getmood(state)
	graphic=graphics[state["grow"]][mood]
	graphic=graphic.ljust(7)
	graphout+=graphic

def do(state,action):
	time=float(datetime.datetime.now().strftime("%s.%f"))
	state=getstatus(state,time)
	if action in ["food","play","clean","learn","sleep","heal"]:
		state=wait(state,action,time)
		state=getstatus(state,time)
	elif action=="feed":
			state=do(state,"food")
	elif action=="fun":
			state=do(state,"play")
	if action=="teach":
			state=do(state,"learn",time)

	return state


config=loadconfig()
lang=loadlang(config["lang"])

parser = argparse.ArgumentParser()
parser.description=lang["program-description"]
parser.add_argument('action', help=lang["action-help"],nargs='?',default="")
parser.add_argument('name', help=lang["name-help"],nargs='?',default="")
parser.add_argument('--debug', action='store_true', help=lang["debug-help"])
parser.add_argument('--timeskip', action='store_true', help=lang["timeskip-help"])
args = parser.parse_args()
state=load()

if args.action=="new":
	if not state["name"] or state["dead"]
		state=birth(args.name);
	else:
		print(lang["error-petexists"])
if not state:
	print(lang["error-nostate"])
	sys.exit(1)
state=do(state,args.action)
showgraphics(state)	
showstatus(state)
save(state)
print(graphout + " ("+ state["name"] + ") " +statout + " " + statusout + messageout + errorout)


if args.debug:
	for key,val in state.items():
		print(key+": "+str(val))
